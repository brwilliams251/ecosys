#!/bin/bash

get_os(){
  if [ -f "/etc/apt/sources.list" ]; then
    if [ -f "/etc/linx-release" ]; then
      os_version=$(cat /etc/linx-release | grep -o '[0-9]\.[0-9]\.[0-9]\{1,3\}' )
      echo "ROCKY $os_version"
    elif [ -f "/etc/lsb-release" ]; then
      os_version=$(cat /etc/lsb-release | grep  "DISTRIB_RELEASE" | cut -d= -f2)
      echo "UBUNTU $os_version"
    elif [ -f "/etc/os-release" ]; then
      os_version=$(cat /etc/os-release | grep  "VERSION_ID" | cut -d= -f2)
      os_version=${os_version//\"}  # remove all double quotes
      echo "DEBIAN $os_version"
    fi
  elif [ -d "/etc/yum.repos.d" ]; then
    # Centos and RedHat are treated equally
    if grep "Amazon Linux" /etc/system-release &>/dev/null; then
      os_version=" 7.0"
    else
      variant="$(cat /etc/system-release | cut -d ' ' -f2)"
      if [ "$variant" = "Stream" ]; then
          os_version=" $(cat /etc/os-release | grep 'VERSION_ID=' | cut -d'"' -f 2)"
      else
          os_version="$(cat /etc/system-release | grep -o ' [0-9]\.[0-9]\{1,3\}')"
      fi
    fi
    echo "RHEL$os_version"
  elif [ -d "/etc/zypp/repos.d" ]; then
    os_version=$(cat /etc/os-release | grep  "VERSION_ID" | cut -d= -f2)
    os_version=${os_version//\"}  # remove all double quotes
    echo "SUSE $os_version"
  else
    echo "UNKOWN OS"
  fi
}

check_os(){
  OS=$1
  version=$2
  note "OS obtained: $OS $version"
  local error_msg="Unsupported OS. Current support CentOS 6.5 to 8.0; RedHat 6.5 to 9.0;"
  if [ -z "$version" ]; then
    error "Unknown OS version. $error_msg"
    exit 1
  fi

  if [ "$OS" = "RHEL" ]; then
   # the following one will end with one item array on docker centos 7.3, i.e. "${ver_arr[0]}" is "7 3"
   # local ver_arr=(${version//./ })
    IFS='.' read -r -a ver_arr <<< "$version"
    if [[ "${ver_arr[0]}" -lt "6" || "${ver_arr[0]}" -eq "6" && "${ver_arr[1]}" -lt "5" ]]; then
      error "$error_msg"
      exit 1
    else
      note "OS check passed [OK]"
    fi
  else
    error "$error_msg"
    exit 1
  fi
}

check_root(){
  if [[ $EUID -ne 0 ]]; then
    error "Sudo or root rights are required."
    exit 1
  fi
}

install_openJDK(){
  if [[ "${SETUP_JDK}" == "true" ]]; then
    if ! which java > /dev/null 2>&1; then
      prog "start install openjdk-1.8.0."
      yum install -y java-1.8.0-openjdk > /dev/null 2>&1
    else
    java_version=$(java -version 2>&1 | sed '1!d' | sed -e 's/"//g' | awk '{print $3}'| cut -d_ -f1)
      if [[ $java_version != "1.8.0" ]];then
        prog "start update to openjdk-1.8.0."
        rpm -qa | grep java | xargs rpm -e --nodeps
        yum install -y java-1.8.0-openjdk > /dev/null 2>&1
      else
        prog "The java version is openjdk-1.8.0 now."
      fi
    fi
    # check install
    if command -v java &> /dev/null;then
      prog "JDK Install Success..."
    else
      error "JDK Install Fail..." && exit 1
    fi

  else
    if ! which java > /dev/null 2>&1; then
      error "Java environment not detected. You can choose option \"-i\" to install openjdk-1.8.0."
      exit 1
    else
      java_version=$(java -version 2>&1 | sed '1!d' | sed -e 's/"//g' | awk '{print $3}'| cut -d_ -f1)
      if [[ $java_version != "1.8.0" ]];then
        error "This script currently only supports openjdk-1.8.0."
        exit 1
      else
        prog "The java version is openjdk-1.8.0 now."
      fi
    fi
  fi
}

install_openssl(){
  if ! openssl version > /dev/null 2>&1;then
    prog "start install openssl..."
    yum -y install openssl > /dev/null 2>&1
  fi

  if [ $? != 0 ]; then
    error "Failed to install openssl."
    exit 1
  fi
}

ssl_oneway_ca_generate(){
  if [ ! -d ${generate_root} ]; then
    mkdir -p ${generate_root}
  fi

  cd $generate_root
  prog "start create certificates..."
  keytool -keystore server.keystore.jks -alias ${server_hostname} -validity 365 -genkey -keyalg RSA -dname "cn=${server_hostname}" -storepass ${pass} -keypass ${pass}
  openssl req -nodes -new -x509 -keyout ca-root.key -out ca-root.crt -days 365 -subj "/C=US/ST=CA/L=Palo Alto/O=Tigergraph/CN=Tigergraph"
  echo ${pass} | keytool -keystore server.keystore.jks -alias ${server_hostname} -certreq -file ${server_hostname}_server.csr
  openssl x509 -req -CA ca-root.crt -CAkey ca-root.key -in ${server_hostname}_server.csr -out ${server_hostname}_server.crt -days 365 -CAcreateserial
  echo ${pass} | keytool -keystore server.keystore.jks -alias CARoot -import -noprompt -file ca-root.crt
  echo ${pass} | keytool -keystore server.keystore.jks -alias ${server_hostname} -import -file ${server_hostname}_server.crt
  echo -e "${pass}\n${pass}\ny" | keytool -keystore server.truststore.jks -alias CARoot -import -file ca-root.crt

  if [ $? != 0 ]; then
    error "Failed to generate certificates."
    exit 1
  else
    prog "Certificates generated successfully."
  fi
}

ssl_oneway_ca_generate(){
  if [ ! -d ${generate_root} ]; then
    mkdir -p ${generate_root}
  fi

  cd $generate_root
  prog "start create ssl_one_way certificates..."
  keytool -keystore server.keystore.jks -alias ${server_hostname} -validity 365 -genkey -keyalg RSA -dname "cn=${server_hostname}" -storepass ${pass} -keypass ${pass}
  openssl req -nodes -new -x509 -keyout ca-root.key -out ca-root.crt -days 365 -subj "/C=US/ST=CA/L=Palo Alto/O=Tigergraph/CN=Tigergraph"
  echo ${pass} | keytool -keystore server.keystore.jks -alias ${server_hostname} -certreq -file ${server_hostname}_server.csr
  openssl x509 -req -CA ca-root.crt -CAkey ca-root.key -in ${server_hostname}_server.csr -out ${server_hostname}_server.crt -days 365 -CAcreateserial
  echo ${pass} | keytool -keystore server.keystore.jks -alias CARoot -import -noprompt -file ca-root.crt
  echo ${pass} | keytool -keystore server.keystore.jks -alias ${server_hostname} -import -file ${server_hostname}_server.crt
  echo -e "${pass}\n${pass}\ny" | keytool -keystore server.truststore.jks -alias CARoot -import -file ca-root.crt

  if [ $? != 0 ]; then
    error "Failed to generate certificates."
    exit 1
  else
    prog "Certificates generated successfully."
  fi
}

ssl_twoway_ca_generate(){
  if [ ! -d ${generate_root} ]; then
    mkdir -p ${generate_root}
  fi

  cd $generate_root
  prog "start create ssl_two_way certificates for kafka broker..."
  keytool -keystore server.keystore.jks -alias ${server_hostname} -validity 365 -genkey -keyalg RSA -dname "cn=${server_hostname}" -storepass ${pass} -keypass ${pass}
  openssl req -nodes -new -x509 -keyout ca-root.key -out ca-root.crt -days 365 -subj "/C=US/ST=CA/L=Palo Alto/O=Tigergraph/CN=Tigergraph"
  echo ${pass} | keytool -keystore server.keystore.jks -alias ${server_hostname} -certreq -file ${server_hostname}_server.csr
  openssl x509 -req -CA ca-root.crt -CAkey ca-root.key -in ${server_hostname}_server.csr -out ${server_hostname}_server.crt -days 365 -CAcreateserial
  echo ${pass} | keytool -keystore server.keystore.jks -alias CARoot -import -noprompt -file ca-root.crt
  echo ${pass} | keytool -keystore server.keystore.jks -alias ${server_hostname} -import -file ${server_hostname}_server.crt

  prog "start generate private key, public key certificate pair for the client..."
  openssl req -newkey rsa:2048 -nodes -keyout ${client_hostname}_client.key -out ${client_hostname}_client.csr -subj "/C=US/ST=CA/L=Palo Alto/O=Tigergraph/CN=Tigergraph"
  openssl x509 -req -CA ca-root.crt -CAkey ca-root.key -in ${client_hostname}_client.csr -out ${client_hostname}_client.crt -days 365 -CAcreateserial
  echo -e "${pass}\n${pass}\ny" | keytool -keystore server.truststore.jks -alias CARoot -import -file ca-root.crt

  if [ $? != 0 ]; then
    error "Failed to generate certificates."
    exit 1
  else
    prog "Certificates generated successfully."
  fi
}

help(){
  echo
  echo "Usage:"
  mesg_green "./`basename $0` [-o ssl_two_way] [-c <tigergraph_client_name>] [-s <broker_host_name>] [-t <ssl_file_path>] [-p <password>] [-i]"
  mesg_green "./`basename $0` [-o ssl_two_way] [-c <tigergraph_client_name>] [-s <broker_host_name>] [-t <ssl_file_path>] [-p <password>]"
  mesg_green "./`basename $0` [-o ssl_one_way] [-s <broker_host_name>] [-t <ssl_file_path>] [-p <password>] [-i]"
  mesg_green "./`basename $0` [-o ssl_one_way] [-s <broker_host_name>] [-t <ssl_file_path>] [-p <password>]"
  mesg_green "./`basename $0` -h"
  echo "Options:"
  echo "  -h  --  Show the help"
  echo "  -o  --  SSL certificate type: ssl_one_way or ssl_two_way [default: ssl_one_way]"
  echo "  -s  --  Kafka broker host name [default: kafka-0.tigergraph.com]"
  echo "  -t  --  Certificate Generation Path [default: ~/SSL_files]"
  echo "  -c  --  Tigergraph Client host name"
  echo "  -p  --  Password [default: tiger123]"
  echo "  -i  --  Install openjdk-1.8.0"
  echo
  warn "Using option '-i' will install openjdk-1.8.0, otherwise openjdk-1.8.0 will not be installed.
Please note that if the local machine does not have a java environment, some certificates generation will fail."
  warn "If the option '-o' value is 'ssl_two_way', we should use the '-c' option at the same time."
  exit 0
}